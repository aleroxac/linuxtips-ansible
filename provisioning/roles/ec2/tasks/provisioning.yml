- name: Criando o Security Group
  ec2_group:
    name: "{{ sg_name }}"
    description: Security Group para nodes do cluster k8s
    profile: "{{ profile }}"
    region: "{{ region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
        rule_desc: Acesso via SSH
      - proto: tcp
        from_port: 2379
        to_port: 2380
        cidr_ip: 0.0.0.0/0
        rule_desc: ETCD Server API
      - proto: tcp
        from_port: 6443
        to_port: 6443
        cidr_ip: 0.0.0.0/0
        rule_desc: Kube API Server
      - proto: tcp
        from_port: 10250
        to_port: 10250
        cidr_ip: 0.0.0.0/0
        rule_desc: Kube Scheduler
      - proto: tcp
        from_port: 10251
        to_port: 10251
        cidr_ip: 0.0.0.0/0
        rule_desc: Kubelet API
      - proto: tcp
        from_port: 10252
        to_port: 10252
        cidr_ip: 0.0.0.0/0
        rule_desc: Kube Controller Manager
      - proto: tcp
        from_port: 10255
        to_port: 10255
        cidr_ip: 0.0.0.0/0
        rule_desc: Kubelet API Read-Only
      - proto: tcp
        from_port: 30000
        to_port: 32767
        cidr_ip: 0.0.0.0/0
        rule_desc: NodePort Services
      - proto: tcp
        from_port: 6783
        to_port: 6783
        cidr_ip: 0.0.0.0/0
        rule_desc: WeaveNet
      - proto: tcp
        from_port: 32111
        to_port: 32111
        cidr_ip: 0.0.0.0/0
        rule_desc: GiropopsAppPrometheus
      - proto: tcp
        from_port: 32222
        to_port: 32222
        cidr_ip: 0.0.0.0/0
        rule_desc: GiropopsApp
      - proto: udp
        from_port: 6783
        to_port: 6783
        cidr_ip: 0.0.0.0/0
        rule_desc: WeaveNet
      - proto: udp
        from_port: 6784
        to_port: 6784
        cidr_ip: 0.0.0.0/0
        rule_desc: WeaveNet
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: basic_sg


- name: Criando a instância EC2
  ec2:
    group: "{{ sg_name }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_ami }}"
    profile: "{{ profile }}"
    region: "{{ region }}"
    keypair: "{{ keypair }}"
    count: "{{ count }}"
    wait: true
  register: ec2


- name: Adicionando uma tag na instância criada
  local_action: ec2_tag region="{{ region }}" resource="{{ item.id }}" state=present
  with_items: "{{ ec2.instances }}"
  args:
    tags:
      Name: "ansible-{{ item.ami_launch_index|int +1 }}"


- name: Esperando disponibilidade da conexão SSH
  wait_for:
    host: "{{ item.public_ip }}"
    port: 22
    state: started
  with_items: "{{ ec2.instances }}"


- name: Adicionando a instância criada anteriormente ao inventário temporário
  add_host:
    name: "{{ item.public_ip }}"
    groups: giropops_new
  with_items: "{{ ec2.instances }}"


- name: Adicionando o IP privado da instância recém criada ao arquivo hosts
  local_action: lineinfile
    path="./hosts"
    regexp={{ item.private_ip }}
    insertafter="[k8s]"
    line="{{ item.private_ip }}"
  with_items: "{{ ec2.instances }}"


- name: Adicionando o IP público da instância recém criada ao arquivo hosts
  local_action: lineinfile
    path="./hosts"
    regexp={{ item.public_ip }}
    insertafter="[k8s]"
    line="{{ item.public_ip }}"
  with_items: "{{ ec2.instances }}"
